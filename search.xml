<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[hexo+gihub简易搭建个人博客]]></title>
      <url>/2017/10/17/hexo+github%E7%AE%80%E6%98%93%E6%90%AD%E5%BB%BAblog/</url>
      <content type="html"><![CDATA[<p>这篇实在太全，感谢原作者，需要请戳：<br><a href="http://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html" target="_blank" rel="external">http://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html</a></p>
]]></content>
      
        <categories>
            
            <category> 个人收藏 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu+nginx 下小幺鸡的安装]]></title>
      <url>/2017/05/24/ubuntu+nginx%20%E4%B8%8B%E5%B0%8F%E5%B9%BA%E9%B8%A1%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>本人最近尝试了在ubuntu下配置 www.xiaoyaoji.com.cn 接口文档环境, 想说从此以后跟后端的交互就靠着这个, 实现高效沟通.<br>老大对我找的接口文档要求,就是能够本地部署,支持二次开发.小幺鸡恰好符合.</p>
<p>小幺鸡文档环境配置要求:</p>
<blockquote>
<p> jdk1.7以上   tomcat7以上  mysql5.5以上</p>
</blockquote>
<h3 id="先装jdk环境"><a href="#先装jdk环境" class="headerlink" title="先装jdk环境"></a>先装jdk环境</h3><p>1.查看linux下的jdk版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java --version</div></pre></td></tr></table></figure></p>
<p>这时候默认的可能是显示默认的openJDK:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OpenJDK Runtime Environment (build 1.6.0-b09)</div><div class="line">OpenJDK 64-Bit Server VM (build 1.6.0-b09, mixed mode)</div></pre></td></tr></table></figure></p>
<p>2.你可以选择卸载掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get remove openjdk*</div></pre></td></tr></table></figure></p>
<p>3.选择适合自己的jdk</p>
<p>你需要下载jdk，建议在Oracle的官网下载，以下是各个版本的最新版本的下载链接：<br>jdk1.6（Linux 64位）的最新版本：<a href="http://download.oracle.com/otn/java/jdk/6u45-b06/jdk-6u45-linux-x64.bin?AuthParam=1469888144_a5888dc2ddea46a4bd983fc8e323dde6" target="_blank" rel="external">http://download.oracle.com/otn/java/jdk/6u45-b06/jdk-6u45-linux-x64.bin?AuthParam=1469888144_a5888dc2ddea46a4bd983fc8e323dde6</a></p>
<p>jdk1.7的最新版本（linux 64位）：<a href="http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.tar.gz?AuthParam=1469888541_713e4316772da5ea5e020cf6f091c32f" target="_blank" rel="external">http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.tar.gz?AuthParam=1469888541_713e4316772da5ea5e020cf6f091c32f</a></p>
<p>jdk1.8的最新版本（linux64位）：<a href="http://download.oracle.com/otn/java/jdk/8u92-b14/jdk-8u92-linux-x64.tar.gz?AuthParam=1469888482_dc98c0ed2225048dd3264442cacfa96b" target="_blank" rel="external">http://download.oracle.com/otn/java/jdk/8u92-b14/jdk-8u92-linux-x64.tar.gz?AuthParam=1469888482_dc98c0ed2225048dd3264442cacfa96b</a></p>
<p>用wget方式分别下载到/usr/lib/Java目录下（如果没有java目录，用以下命令进行创建sudo mkdir /usr/lib/java）<br>(如果命令安装太慢,可以直接下载包再移进去)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo wget http://download.oracle.com/otn/java/jdk/6u45-b06/jdk-6u45-linux-x64.bin?AuthParam=1469888144_a5888dc2ddea46a4bd983fc8e323dde6</div><div class="line">sudo wget http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.tar.gz?AuthParam=1469888541_713e4316772da5ea5e020cf6f091c32f</div><div class="line">sudo wget http://download.oracle.com/otn/java/jdk/8u92-b14/jdk-8u92-linux-x64.tar.gz?AuthParam=1469888482_dc98c0ed2225048dd3264442cacfa96b</div></pre></td></tr></table></figure></p>
<p>下载完成后,你得到的是一个压缩包,解压到：/usr/lib/Java目录下。<br>前面你只是解压了jdk到某个目录下，如果想使用某个jdk版本，还必须修改环境，使其指向要使用的jdk版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/profile</div></pre></td></tr></table></figure></p>
<p>在这个文件的末尾加上(修改你的yourjdkfoldername)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/java/yourjdkfoldername</div><div class="line">export CLASSPATH=$&#123;JAVA_HOME&#125;/lib</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>然后执行以下命令使其生效，查看jdk是否生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source ~/.profile</div><div class="line">java --version</div></pre></td></tr></table></figure></p>
<p>如果显示不再是openjdk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.8.0_131&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)</div></pre></td></tr></table></figure></p>
<p>那么到此,你的jdk就安装就完成了!</p>
<h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><p>装部署tomcat之前必须先安装好JDK或JRE的环境.JRE是java程序运行的基础,而jdk是给开发java程序的人员提供了包括jre在内的基本环境以及一些开发工具.</p>
<blockquote>
<p>详见: <a href="http://note.youdao.com/groupshare/?token=A8B52AEB48B74FCEB286A5A8766C8AA9&amp;gid=29536445" target="_blank" rel="external">http://note.youdao.com/groupshare/?token=A8B52AEB48B74FCEB286A5A8766C8AA9&amp;gid=29536445</a></p>
</blockquote>
<ol>
<li><p>创建tomcat用户</p>
<blockquote>
<p>为了安全考虑，Tomcat 需要以普通用户的权限来运行。所以我们将创建一个用户和用户组，来运行 Tomcat 服务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">创建tomcat用户组</div><div class="line">$ sudo groupadd tomcat</div><div class="line">创建tomcat用户,用户主目录为 /etc/tomcat ，这个目录也是我们将用来安装 tomcat 的目录（当然也可以是你喜欢的其他目录）</div><div class="line">$ sudo useradd -s /bin/false -g tomcat -d /etc/tomcat tomcat</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>下载tomcat <a href="http://www.apache.org/tomcat/" target="_blank" rel="external">http://www.apache.org/tomcat/</a> 并安装到 /etc/下</p>
<blockquote>
<p>用户 tomcat 需要有合适的权限来运行Tomcat 服务，所以接下来需要设置用户权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ cd /etc/tomcat</div><div class="line">给用户conf的写入权限,以及对子目录的读权限</div><div class="line">$ sudo chgrp -R tomcat conf</div><div class="line">$ sudo chmod g+rwx conf</div><div class="line">$ sudo chmod g+r conf/*</div><div class="line">设置tomcat用户对 work/ temp/ logs/这几个目录的所有权</div><div class="line">sudo chown -R tomcat work/ temp/ logs/</div><div class="line">修改 /etc/init/tomcat.conf </div><div class="line">env JAVA_HOME=/usr/lib/jvm/yourjdkfoldername/jre</div><div class="line">env CATALINA_HOME=/etc/tomcat</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>修改环境变量</p>
<p>将以下的变量配置放在之前配置jdk环境变量的后面即可，如下：<br>在目录/etc下修改profile文件，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">命令: vi /etc/profile</div><div class="line">将下列配置写到该文件下</div><div class="line">export CATALINA_HOME=/etc/tomcat</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib:$CATALINA_HOME/lib</div><div class="line">export PATH=$PATH:$CATALINA_HOME/bin</div><div class="line"></div><div class="line">配置完成之后执行命令：source /etc/profile，</div><div class="line">如果没有提示错误，证明配置ok</div><div class="line">可以通过echo $CLASSPATH来查看环境配置</div></pre></td></tr></table></figure>
</li>
<li><p>重启tomcat script</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo initctl reload-configuration</div><div class="line">$ sudo initctl start tomcat</div></pre></td></tr></table></figure>
</li>
<li><p>执行sh catalina.sh或者sh startup.sh</p>
</li>
<li><p>提示如下信息表示配置ok：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Using CATALINA_BASE:   /etc/tomcat</div><div class="line">Using CATALINA_HOME:   /etc/tomcat</div><div class="line">Using CATALINA_TMPDIR: /etc/tomcat/temp</div><div class="line">Using JRE_HOME:        /usr/jdk1.8.0_131</div><div class="line">Using CLASSPATH:       /etc/tomcat/bin/bootstrap.jar</div></pre></td></tr></table></figure>
</li>
<li><p>先再虚拟机上访问访问tomcat首页,如果正常显示tomcat首页表明配置ok。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://localhost：8080/</div></pre></td></tr></table></figure>
</li>
<li><p>有可能因为8080端口被占用而启动失败</p>
<blockquote>
<p>解决办法: 到  /etc/tomcat/conf/server.xml去修改端口配置(我是将8080改为9009)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;9009&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">           connectionTimeout=&quot;20000&quot;</div><div class="line">           redirectPort=&quot;8443&quot; /&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>在虚拟机上你能够访问 <a href="http://localhost：9009/" target="_blank" rel="external">http://localhost：9009/</a> 但是主机上不能访问</p>
<blockquote>
<p>在Vagrantfile上配置端口映射,设定语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  将主机上的9009请求都转发到虚拟机上的9009端口进行处理</div><div class="line">config.vm.network :forwarded_port, guest: 9009, host: 9009</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>于是你可以在主机上 打开 <a href="http://localhost:9009/访问tomcat页面了" target="_blank" rel="external">http://localhost:9009/访问tomcat页面了</a></p>
<h3 id="在tomcat下配置小幺鸡"><a href="#在tomcat下配置小幺鸡" class="headerlink" title="在tomcat下配置小幺鸡"></a>在tomcat下配置小幺鸡</h3><p>可直接参考官方文档: </p>
<blockquote>
<p><a href="http://git.oschina.net/zhoujingjie/apiManager" target="_blank" rel="external">http://git.oschina.net/zhoujingjie/apiManager</a></p>
</blockquote>
<h3 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h3><p>到这步都默认你可以用: <a href="http://localhost:9009/" target="_blank" rel="external">http://localhost:9009/</a> 打开小幺鸡了<br>但是我想试试用nginx代理下tomcat(此步多余,仅为个人练习)</p>
<ol>
<li><p>到 /etc/nginx/sites-available</p>
<blockquote>
<p>sites-available是我们的虚拟主机的目录，我们在在这里面可以创建多个虚拟主机.</p>
</blockquote>
</li>
<li><p>创建一个xiaoyaoji-api.com的虚拟主机</p>
</li>
<li><p>修改xaoyaoji-api.com里的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">命令: vim xiaoyaoji-api.com</div><div class="line">里面的配置如下:</div><div class="line">server &#123;</div><div class="line">        listen 80; </div><div class="line">        server_name xiaoyaoji-api.com;</div><div class="line">    </div><div class="line">        root /etc/tomcat/webapps/ROOT;</div><div class="line">        index index.html index.htm index.php;</div><div class="line"></div><div class="line">        # Make site accessible from http://localhost/</div><div class="line">        #server_name localhost;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">                proxy_pass http://127.0.0.1:9009/;</div><div class="line">                index index.php index.html;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>软连接到sites-enabled </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令: ln -s /etc/nginx/sites-available/xiaoyaoji-api.com /etc/nginx/sites-enabled/xiaoyaoji-api.com</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>sites-enabled的配置文件其实就是sites-available里面的配置文件的软连接,但是由于nginx.conf默认包含的是这个文件夹,所以我们在sites-available里面建立了新的站点之后,还要建立个软连接到sites-enabled里面才行.</p>
</blockquote>
<ol>
<li>再去本地的 /etc/host文件下加上以下配置,就可以通过域名访问小幺鸡啦!<blockquote>
<p>127.0.0.1 xiaoyaoji-api.com </p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Git-2个分支间的切换保存]]></title>
      <url>/2017/03/27/Git-2%E4%B8%AA%E5%88%86%E6%94%AF%E9%97%B4%E7%9A%84%E5%88%87%E6%8D%A2%E4%BF%9D%E5%AD%98/</url>
      <content type="html"><![CDATA[<h3 id="Git-2个分支间的切换保存"><a href="#Git-2个分支间的切换保存" class="headerlink" title="Git-2个分支间的切换保存"></a>Git-2个分支间的切换保存</h3><p>最近我们公司要对项目某部分进行代码重构，但是时不时又会有新的需求更开发。于是有了在两个分支之间游走切换的问题，在refactorig上进行重构，在master上进行原项目的新需求开发。</p>
<h4 id="我新建refactorig分支并推送到远程仓库"><a href="#我新建refactorig分支并推送到远程仓库" class="headerlink" title="我新建refactorig分支并推送到远程仓库"></a>我新建refactorig分支并推送到远程仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">创建并切换到此分支</div><div class="line">git branch refactoring</div><div class="line">git checkout -b refactoring</div><div class="line"></div><div class="line">// or</div><div class="line"></div><div class="line">git checkout -b refactoring   </div><div class="line"></div><div class="line">then推送到远程仓库</div><div class="line"></div><div class="line">git push orgin refactoring</div></pre></td></tr></table></figure>
<h4 id="我新建了分支到远程仓库，但是你本地git-branch-查不到？"><a href="#我新建了分支到远程仓库，但是你本地git-branch-查不到？" class="headerlink" title="我新建了分支到远程仓库，但是你本地git branch 查不到？"></a>我新建了分支到远程仓库，但是你本地git branch 查不到？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git fetch origin refacoring</div><div class="line">git branch refacoring</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">git fetch origin refacoring:refacoring</div></pre></td></tr></table></figure>
<blockquote>
<p>使用远程refacoring分支在本地创建refacoring(但不会切换到该分支),<br>如果本地不存在refacoring分支, 则会自动创建一个新的refacoring分支,<br>如果本地存在refacoring分支, 并且是`fast forward’, 则自动合并两个分支, 否则, 会阻止以上操作。</p>
</blockquote>
<h4 id="方法1：切换保存"><a href="#方法1：切换保存" class="headerlink" title="方法1：切换保存"></a>方法1：切换保存</h4><p>当我在进行重构的时候，这时候新需求下来了，我肯定得去先把新需求搞定吧，但是我的重构某一功能写到一半，还没测试，push上去恐怕会影响到别人，那肿办？</p>
<ul>
<li>先把正在进行的refactoring </li>
<li>commit掉</li>
<li>不push</li>
<li>切换到 master分支  git checkout master</li>
<li>做完了commit </li>
<li>再切回去你的refactoring</li>
</ul>
<blockquote>
<p>这是理想的办法，互不影响。<br>别担心refactoring和master的本地代码会互相影响到，你切换分支的时候，本地代码也会切换的。</p>
</blockquote>
<h4 id="方法2：使用git-stash"><a href="#方法2：使用git-stash" class="headerlink" title="方法2：使用git stash"></a>方法2：使用git stash</h4><p>先把正在进行的refactoring：</p>
<ul>
<li>git stash / git stash save “修改的信息”<br>( 这样以后你的代码就回到了自己上一个commit了，直接git stash的话git stash的栈会给你一个hash值作为版本说明，如果你有填写“修改的信息”，git stash的栈会把你填写的信息作为版本的说明。)</li>
<li>接下来你回到master分支修改完成，你又再回到refactoring分支，输入</li>
<li>git stash pop / git stash list ( 就可以回到保存的版本了。git stash pop的作用是将git stash栈中最后一个版本取出来。)</li>
</ul>
<h3 id="合并问题"><a href="#合并问题" class="headerlink" title="合并问题"></a>合并问题</h3><ul>
<li>master 进化到了 master2</li>
<li>refactoring 进化到了 refactoring2</li>
</ul>
<h4 id="方法1：直接merge"><a href="#方法1：直接merge" class="headerlink" title="方法1：直接merge"></a>方法1：直接merge</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git merge refactoring</div><div class="line"></div><div class="line">然后安心删除refactoring分支</div><div class="line">git branch -d refactoring</div></pre></td></tr></table></figure>
<h4 id="方法2：让分支历史看起来像没有经过任何合并一样"><a href="#方法2：让分支历史看起来像没有经过任何合并一样" class="headerlink" title="方法2：让分支历史看起来像没有经过任何合并一样"></a>方法2：让分支历史看起来像没有经过任何合并一样</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout refactoring</div><div class="line">git rebase origin</div></pre></td></tr></table></figure>
<blockquote>
<p>这些命令会把你的”refactoring”分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到”.git/rebase”目录中),然后把”refactoring”分支更新 为最新的”origin”分支，最后把保存的这些补丁应用到”refactoring”分支上。</p>
</blockquote>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">解决冲突 手动解决</div><div class="line">再 git add .</div><div class="line">git commit</div></pre></td></tr></table></figure>
<h4 id="rebase的过程中，也许会出现冲突-conflict"><a href="#rebase的过程中，也许会出现冲突-conflict" class="headerlink" title="rebase的过程中，也许会出现冲突(conflict)"></a>rebase的过程中，也许会出现冲突(conflict)</h4><p>在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用”git-add”命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:<br>$ git rebase –continue<br>这样git会继续应用(apply)余下的补丁。<br>在任何时候，你可以用–abort参数来终止rebase的行动，并且”refactoring” 分支会回到rebase开始前的状态。<br>$ git rebase –abort</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
